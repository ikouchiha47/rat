name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write  # Required for creating releases and uploading assets

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      run: make deps
      
    - name: Run tests
      run: make test
      
    - name: Build for all platforms
      run: make build-all
      
    - name: Create checksums
      run: |
        sha256sum ratata-* > checksums.txt
        
    - name: Get version from tag
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="dev-$(git rev-parse --short HEAD)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## 🚀 Local Chat Application ${{ steps.version.outputs.version }}
          
          ### 📦 Downloads
          
          Choose the appropriate binary for your platform:
          
          - **Linux (x64)**: `ratata-linux-amd64`
          - **macOS (Intel)**: `ratata-darwin-amd64` 
          - **macOS (Apple Silicon)**: `ratata-darwin-arm64`
          - **Windows (x64)**: `ratata-windows-amd64.exe`
          
          ### 🔧 Installation
          
          1. Download the binary for your platform
          2. Make it executable (Linux/macOS): `chmod +x ratata-*`
          3. Run: `./ratata-* -u your_username`
          
          ### ✨ Features
          
          - **Zero Configuration**: Automatic peer discovery using mDNS
          - **Vibrant Terminal UI**: Beautiful colors and modern interface
          - **End-to-End Encryption**: Secure messaging between peers
          - **Room-based Chat**: Join and create chat rooms
          - **Cross-platform**: Works on Linux, macOS, and Windows
          - **Professional Logging**: Clean terminal with optional verbose mode
          
          ### 🔐 Security
          
          All messages are encrypted end-to-end using modern cryptography. Key exchange happens automatically when users join rooms.
          
          ### 📋 Checksums
          
          Verify your download integrity using the checksums in `checksums.txt`.
          
        draft: false
        prerelease: false
        
    - name: Upload Linux AMD64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./ratata-linux-amd64
        asset_name: ratata-linux-amd64
        asset_content_type: application/octet-stream
        
    - name: Upload macOS AMD64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./ratata-darwin-amd64
        asset_name: ratata-darwin-amd64
        asset_content_type: application/octet-stream
        
    - name: Upload macOS ARM64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./ratata-darwin-arm64
        asset_name: ratata-darwin-arm64
        asset_content_type: application/octet-stream
        
    - name: Upload Windows AMD64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./ratata-windows-amd64.exe
        asset_name: ratata-windows-amd64.exe
        asset_content_type: application/octet-stream
        
    - name: Upload Checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain

  # Optional: Also create a latest release for easy access
  update-latest:
    needs: build-and-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')  # Only for stable releases (no pre-release tags)
    
    steps:
    - name: Update latest release
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo } = context.repo;
          
          // Get the release that was just created
          const releases = await github.rest.repos.listReleases({
            owner,
            repo,
            per_page: 1
          });
          
          if (releases.data.length > 0) {
            const latestRelease = releases.data[0];
            
            // Update the release to mark it as latest
            await github.rest.repos.updateRelease({
              owner,
              repo,
              release_id: latestRelease.id,
              make_latest: 'true'
            });
            
            console.log(`Updated release ${latestRelease.tag_name} as latest`);
          }
